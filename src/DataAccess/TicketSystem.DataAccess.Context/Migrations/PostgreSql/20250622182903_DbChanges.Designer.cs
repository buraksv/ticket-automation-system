// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketSystem.DataAccess.Context;

#nullable disable

namespace TicketSystem.DataAccess.Context.Migrations.PostgreSql
{
    [DbContext(typeof(TicketAutomationSystemDbContext))]
    [Migration("20250622182903_DbChanges")]
    partial class DbChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gronio.Database.Abstraction.Entity.TranslateRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("LanguageOptionsString")
                        .HasColumnType("jsonb")
                        .HasColumnName("LanguageOptions");

                    b.HasKey("Id");

                    b.ToTable("TranslateRecords", (string)null);
                });

            modelBuilder.Entity("Gronio.Database.Abstraction.Entity.TranslateResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("smallint");

                    b.Property<int>("TranslateRecordId")
                        .HasColumnType("integer")
                        .HasColumnName("TranslateRecordId");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.Property<string>("Value")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.HasKey("Id");

                    b.HasIndex("TranslateRecordId");

                    b.HasIndex("Key", "Value");

                    b.HasIndex("LanguageId", "Key", "Value");

                    b.ToTable("TranslateResources", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.Admin", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<string>("MailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.SystemSettings", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.Team", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("TicketSystem")
                        .HasColumnType("smallint")
                        .HasComment("1 - PassoLig,2 - Biletix,3 - BuBilet,4 - BiletiniAl,5 - TicketMaster");

                    b.Property<string>("TicketSystemConfigurations")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketAccountDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("AccountType")
                        .HasColumnType("smallint")
                        .HasComment("1 - System,2 - Customer");

                    b.Property<short>("AdminId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<short>("TeamId")
                        .HasColumnType("smallint");

                    b.Property<byte>("TicketSystem")
                        .HasColumnType("smallint")
                        .HasComment("1 - PassoLig,2 - Biletix,3 - BuBilet,4 - BiletiniAl,5 - TicketMaster");

                    b.Property<bool>("TicketSystemIsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("TicketSystemLastValidationControlTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TicketSystemLoginInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("IsActive");

                    b.HasIndex("TeamId");

                    b.ToTable("TicketAccountDefinitions", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseCompletedOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("TicketOrderedInformations")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TicketPurchaseOrderAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketPurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TicketSalePrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("TicketPurchaseOrderAccountId");

                    b.HasIndex("TicketPurchaseOrderId");

                    b.ToTable("TicketPurchaseCompletedOrders", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AdminId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AutomationRunTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<short>("TeamId")
                        .HasColumnType("smallint");

                    b.Property<string>("TicketEventId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte>("TicketSystem")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("IsActive");

                    b.HasIndex("TeamId");

                    b.ToTable("TicketPurchaseOrders", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseOrderAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AdminId")
                        .HasColumnType("smallint");

                    b.Property<short>("Count")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<short>("OrderedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("TicketAccountDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("TicketEventOrderSelections")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("TicketPurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TicketAccountDefinitionId");

                    b.HasIndex("TicketPurchaseOrderId");

                    b.ToTable("TicketPurchaseOrderAccounts", (string)null);
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseOrderSystemLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<byte>("LogType")
                        .HasColumnType("smallint")
                        .HasComment("1 - Info,2 - Error,3 - Warning,4 - Debug");

                    b.HasKey("Id");

                    b.ToTable("TicketPurchaseOrderSystemLogs", (string)null);
                });

            modelBuilder.Entity("Gronio.Database.Abstraction.Entity.TranslateResource", b =>
                {
                    b.HasOne("Gronio.Database.Abstraction.Entity.TranslateRecord", "TranslateRecord")
                        .WithMany("TranslateResources")
                        .HasForeignKey("TranslateRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslateRecord");
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketAccountDefinition", b =>
                {
                    b.HasOne("TicketSystem.DataAccess.Entity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DataAccess.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseCompletedOrder", b =>
                {
                    b.HasOne("TicketSystem.DataAccess.Entity.TicketPurchaseOrderAccount", "TicketPurchaseOrderAccount")
                        .WithMany()
                        .HasForeignKey("TicketPurchaseOrderAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DataAccess.Entity.TicketPurchaseOrder", "TicketPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("TicketPurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketPurchaseOrder");

                    b.Navigation("TicketPurchaseOrderAccount");
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseOrder", b =>
                {
                    b.HasOne("TicketSystem.DataAccess.Entity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DataAccess.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TicketSystem.DataAccess.Entity.TicketPurchaseOrderAccount", b =>
                {
                    b.HasOne("TicketSystem.DataAccess.Entity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DataAccess.Entity.TicketAccountDefinition", "TicketAccountDefinition")
                        .WithMany()
                        .HasForeignKey("TicketAccountDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.DataAccess.Entity.TicketPurchaseOrder", "TicketPurchaseOrder")
                        .WithMany()
                        .HasForeignKey("TicketPurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("TicketAccountDefinition");

                    b.Navigation("TicketPurchaseOrder");
                });

            modelBuilder.Entity("Gronio.Database.Abstraction.Entity.TranslateRecord", b =>
                {
                    b.Navigation("TranslateResources");
                });
#pragma warning restore 612, 618
        }
    }
}
